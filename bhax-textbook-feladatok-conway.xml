<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
	<para> Tutoriált (am volt): Ignéczi Tibor </para>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/10/10/myrmecologist">https://bhaxor.blog.hu/2018/10/10/myrmecologist</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Myrmecologist">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Myrmecologist</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
A program futtatásakor apró pontok, vagyis hangyák kezdenek el véletlenszerűen mozogni a képen. Ez a program is Qt segítségével működik. A program verzióra ügyelni kell, a túl régiekkel nem fog működni. A programban több osztály is deklarálva van. Az Ant osztályban a hangyák vannak meghatározva, amelyek 3 tulajdonséggal rendeznek, 2 db koordináta pont, ami a pozíciót jelöli és még egy adat, ami az irányt adja meg. Ez az osztály többszörösítve van a programban, így lesz 1 hangyából egy egész hangyaboly. A következő osztály, vagyis az AntWin, a hangyák megrajzolásáért felel. Ez felel a billentyűre történő progrsam megállításért, szüneteltetésért, és a programból történő kilépésért, a szimuláció megszakításáért. Az utolsó osztály, vagyis az AntThread a hangyák mozgásáért felel, bizonyos feltételek mellett változtatja a hangyák mozgását. A Qt-s fordítás és futtatás a következő: /home/user/QT/5.12.2/gcc_64/bin/qmake myrmecologist.pro , ezután make parancs, majd a futtatás ./myrmecologist .
	</para>  
	<mediaobject>
		<imageobject condition="print">
		 <imagedata fileref="Képek/hangya.png" format="png"/>
		</imageobject>
	</mediaobject>          
    </section>        
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://www.tankonyvtar.hu/en/tartalom/tkt/javat-tanitok-javat/apb.html?fbclid=IwAR3DPY0Tl8ZnlX04V1oCwB0brWWpQklYBwOLWr2i91E1WcjtCnPo2Fwc3RQ#conway">https://www.tankonyvtar.hu/en/tartalom/tkt/javat-tanitok-javat/apb.html?fbclid=IwAR3DPY0Tl8ZnlX04V1oCwB0brWWpQklYBwOLWr2i91E1WcjtCnPo2Fwc3RQ#conway</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>  
	<para>
A lényege ugyan az, mint ahogyan a következő feladatban le van írva. Az élet-halál szabály az időFejlődés() függvényben van meghatározva. A műkdése a kommentekben végig le van vezetve. Meg van fogalmava a kódban az életjáték szabályai, a kirajzolása, a sejtek, siklók és a siklókilövők megalkotása, az egérmozgás és kattintás feldolgozása, valamint a billentyűzetről érkező parancsok esetében is. Pillanatfelvételek készítésére is képesek vagyunk, a program is ez alapján dolgozik. Osztálykezeléssel készült el a program. A Java kódot Sejtautomata.java néven kell lementenünk, így pedig a fordítása javac Sejtautomata.java, a futtatása pedig java Sejtautomata. Futtatáskor bizonyos billentyűk és az egérmutató használatával befolyásolhatjuk a program működését, "parancsot" adhatunk ki neki. Ezek a billentyűk: az s gomb lenyomásával pillanatképet készíthetünk, az n-nel megnövelhetjük a sejtek méretét, még a k-val csökkenthetjük azokat, a g billentyűvel gyorsíthatunk a program működésén, vagyis a szimuláción, az l-lel pedig lassíthatjuk azt. Tehát ahogyan az előbb írtam, az egérgombokkal is befolyásolhatunk, a jobb és bal gombjával a sejt állapotát változtathatjuk, magyarán élőből halottat, vagy halottból élőt lehet csinálni. A mutató vonszolásával pedig élő sejteket hozhatunk létre.
	</para>          
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/kozepes/Qt/sejtautomata/">https://sourceforge.net/p/udprog/code/ci/master/tree/source/kozepes/Qt/sejtautomata/</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>   
	<para>
A szabály ami szerint működik az életjáték, az az, hogy van egy cella, amiben van egy sejt. A sejt csak bizonyos körülmények között marad életben, másképp meghal. A sejt csak abban az esetben marad életben, ha van élő szomszédja, és abból is 2-3. A halott sejt pedig halott marad, ha van 3 élő sejt szomszédja, máskülönben élő lesz. Ennek a működési elve az időFejlődés-ben van leírva. Léteznek a programban bizonyos élőlények, amelyeket siklónak nevezünk, ezeket a siklóKilövő indítja el, ami szintén egy osztály. A rácspontok és az élő sejtek segítségével működnek. A hangyaszimulációhoz hasonlóan itt is van egy osztály, ami a kiíratásért felelős, és a feltételek ellenőrzése után rajzol, valamint eldönti hogy életben hagyja vagy megöli a sejtet. A javashoz hasonlóan itt is befolyásolhatjuk a működését a programnak bizonyos billentyűgombok lenyomásával. A Qt életjátékot Qt program segítségével tudjuk fordítani: /home/user/QT/5.12.2/gcc_64/bin/qmake Sejtauto.pro, majd ezután make parancs kiadásával létrehozzuk a szükséges fájlokat, a futtatása pedig: ./Sejtauto .
	</para> 
	<mediaobject>
		<imageobject condition="print">
		 <imagedata fileref="Képek/conway.png" format="png"/>
		</imageobject>
	</mediaobject>             
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para> Tutor (om volt: Ranyhóczki Mariann) </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nbatfai/esport-talent-search">https://github.com/nbatfai/esport-talent-search</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>    
	<para>
Itt már van egy kicsi különbség az előző 2 programhoz képest. Egy kirajzoló osztályunk itt is van. A program lényegében az esportolók mérésére szolgál, követni kell egy bizonyos pontot, vagyis a hősünket. A hősünket vagyis a karakterünket egy külön osztály segítségével határozzuk meg a programban. Azt teszteli, hogy mennyire tudják az emberek a zavaró tényezők ellenére is követni a hősünket. A zavaró tényező például az, hogy plusz karakterek kerülnek be, a program pedig a követni kívánt karaktert is egyre zavaróbb módon mozgatja. A program futása közben adatot gyűjt, amit a futás után, ha bezártuk vagy ha végigvittük a játékot, és ezt eredményként kirakja nekünk egy külön fájlba/mappába, a programkód mellé. Mivel ehhez is szükséges a Qt program, így a fordítás futtatásra ügyelnünk kell. A fordítása: /home/user/QT/5.12.2/gcc_64/bin/qmake BrainB.pro, ezután make parancs, majd a futtatása ./BrainB .
	</para>  
	<mediaobject>
		<imageobject condition="print">
		 <imagedata fileref="Képek/brainb.png" format="png"/>
		</imageobject>
	</mediaobject>           
    </section>       

</chapter>                
