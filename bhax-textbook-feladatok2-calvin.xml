<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Calvin!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>MNIST</title>
        <para> Tutorom volt: Tóth Attila </para>
        <para>
Az alap feladat megoldása, +saját kézzel rajzolt képet is ismerjen fel, https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol Háttérként ezt vetítsük le: https://prezi.com/0u8ncvvoabcr/no-programming-programming/
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
A feladat megoldásához első lépésként telepítenünk kell a tensorflowt. Ez egy Google által fejlesztett program, ami a tanulást szolgálja, pontosabban a gépek betanításában próbál segítséget nyújtani. A mostani feladatban számokat kell tudnia felismerni képről, ehhez viszont nekünk kell betanítani a programot. A felismerési folyamat során a program súlyokat használ, és az alapján próbálja meghatározni, hogy mennyire egyezik az adott kép azokkal, amelyekkel korábban már találkozott. Első lépés a hálózat betantása, majd ezután meghatározza a program a számítások várható pontosságát. A képeket a következő képpen olvassa be, ha saját képet kap:
        </para>
        <programlisting language="c"><![CDATA[
img = readimg()
        ]]></programlisting>
        <para>
A tanítás után először egy tesztképet kap, egy 4-est (sikeresen felismerte), majd ezután jött a saját kép, amit szintén jól ismert fel. Viszont mivel ez lényegében egy neurális háló, a pontossága befolyásolható például a rétegek (vagy hiddenek) számának a módosításával, bár meg kell jegyezni, hogy ez egy módosított neurális háló, kicsit másabb a működése az általunk eddig megismertéhez képest. Amit a tanításról még kihagytam: először is egy modellt kell megalkotnunk, és ezt fogja a program tetszelni. Ennek eredményéül fogjuk megkapni, hogy felismerte a program az első tesztképünket, majd ezután próbálja meg a saját számot. A hálózat pontosságának meghatározása, és a tesztelés is itt történik.
        </para>
        <mediaobject>
        <imageobject condition="print">
         <imagedata fileref="Prog2/Képek/Calvin/mnist1.png" format="png"/>
        </imageobject>
    </mediaobject>
    <mediaobject>
        <imageobject condition="print">
         <imagedata fileref="Prog2/Képek/Calvin/mnist.png" format="png"/>
        </imageobject>
    </mediaobject>
    </section>        

    <section>
        <title>Android telefonra a TF objektum detektálója</title>
        <para>
Telepítsük fel, és próbáljuk ki!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
Jelen esetben tesztelés volt a feladat. A forrás a tensorflow által készített detektáló volt, amelyet a tensorflow github oldalán találhatunk meg és mindenki számára elérhető. Mivel az egész projekthez hozzá lehet férni, így a legcélszerűbb megoldásnak azt láttam, ha az android studiot hívom segítségül, és telefonon keresztül futtatom. Maga a program hagy kívánnivalót maga után, hiszen ha megnézzük elég érdekes teszteredményeket produkál le. Igaz, vannak tárgyak amiket felismer, de azokat is sokszor úgy, hogy abszolút nem biztos abban, hogy helyes volt e. Néhány példa (ahol a billentyűzetet és telefont felismeri, utóbbit végre határozottan, de a harmadik példánál a csoki és a hotdog szerintem kicsit más):
        </para>
    <mediaobject>
        <imageobject condition="print">
         <imagedata fileref="Prog2/Képek/Calvin/tf1.png" format="png"/>
        </imageobject>
    </mediaobject>
    <mediaobject>
        <imageobject condition="print">
         <imagedata fileref="Prog2/Képek/Calvin/tf3.png" format="png"/>
        </imageobject>
    </mediaobject>
    <mediaobject>
        <imageobject condition="print">
         <imagedata fileref="Prog2/Képek/Calvin/tf2.png" format="png"/>
        </imageobject>
    </mediaobject>

    </section>        

    <section>
        <title>Minecraft MALMO-s példa</title>
        <para>
A https://github.com/Microsoft/malmo felhasználásával egy ágens példa, lásd pl.: https://youtu.be/bAPSu3Rndi8, https://bhaxor.blog.hu/2018/11/29/eddig_csaltunk_de_innentol_mi, https://bhaxor.blog.hu/2018/10/28/minecraft_steve_szemuvege
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
A játékban most a főszereplő Steve lesz (bár erről már a cím is árulkodhat). Az példákkal pedig be lehet mutatni, hogy különböző módosításokkal hogyan irányítható automatikusan is. Mivel a Minecraft világa lényegében kockákból épül fel, ezért amikor az irányítást próbálják megtervezni, akkor is kockákban kell gondolkodni, hogy Stevet melyik kockára léptetik tovább. Ezek alapján tehát 26 kockát kell egyszerre figyelembe venni. A forrást megtalálhatjuk a Microsoft githubos oldalán a malmo projektben. Letöltés után még nem tudjuk rögtön indítani, előbb telepíteni kell a sudo apt-get install libboost-all-dev libpython3.5 openjdk-8-jdk ffmpeg python-tk python-imaging-tk paranccsal. Ezután pedig még 2 parancs végrehajtása szükséges volt nálam, anélkül szintén nem indult: export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/ és egy export MALMO_XSD_PATH=~/MalmoPlatform/Schemas. Ezután pedig már tényleg futtathatjuk a klienst, és el is indul a játék. Itt még csak az alap játékkal találkozunk, ahol mi építünk világot, mi irányítunk, stb... Viszont ha megnézzük az examples mappát, akkor onnan aki tesztelni szeretne kedve szerint tud próbálgatni a korábban említett minták közül. Ekkor a más futó alap játék mellé nyissunk még egy terminált, és ott kezdjük el futtatni valamelyik példát. Ez magától be fog tölteni (néhányhoz még plusz telepítés szükséges, de a legtöbbhöz nem kell). És a kép a feladatról, vagyis a példa ágens futtatásáról:
        </para>
    <mediaobject>
        <imageobject condition="print">
         <imagedata fileref="Prog2/Képek/Calvin/mine1.png" format="png"/>
        </imageobject>
    </mediaobject>
    <mediaobject>
        <imageobject condition="print">
         <imagedata fileref="Prog2/Képek/Calvin/mine3.png" format="png"/>
        </imageobject>
    </mediaobject>
    </section>      
        

</chapter>                
