<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double **</type> háromszögmátrix</title>
        <para>
            Írj egy olyan <function>malloc</function> és <function>free</function>
            párost használó C programot, amely helyet foglal
            egy alsó háromszög mátrixnak a szabad tárban!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/1MRTuKwRsB0">https://youtu.be/1MRTuKwRsB0</link>,
            <link xlink:href="https://youtu.be/RKbX5-EWpzA">https://youtu.be/RKbX5-EWpzA</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Caesar/tm.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/tm.c</filename>
            </link> 
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para> 
        <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <stdlib.h>

int
main ()
{
    int nr = 5; //also haromszog matrix sorainak a szama
    double **tm; //helyfoglalas
    
    printf("%p\n", &tm); //pointer, cim kiiratas
    
    if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL) //malloc pointert ad vissza a lefoglalt teruletrol (man 3-ban meg lehet nezni), 40 bajtot foglal
    {
        return -1; //ha az if igaz, kiugrik a programbol
    }

    printf("%p\n", tm);
    
    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL) //a double*-ra mutat, oda adja a cim nevet
        {
            return -1;
        }

    }

    printf("%p\n", tm[0]);    
    
    for (int i = 0; i < nr; ++i)
        for (int j = 0; j < i + 1; ++j)
            tm[i][j] = i * (i + 1) / 2 + j;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    tm[3][0] = 42.0;
    (*(tm + 3))[1] = 43.0;
    *(tm[3] + 2) = 44.0;
    *(*(tm + 3) + 3) = 45.0;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    for (int i = 0; i < nr; ++i)
        free (tm[i]);

    free (tm); //felszabadítja a tm számára lefoglalt memóriaterületet

    return 0;
}
]]></programlisting>             
	<mediaobject>
		<imageobject condition="print">
		 <imagedata fileref="Képek/matrix.png" format="png"/>
		</imageobject>
	</mediaobject>
	<mediaobject>
		<imageobject condition="print">
		 <imagedata fileref="Képek/matrix2.png" format="png"/>
		</imageobject>
	</mediaobject>
	<para>
Az double ** háromszögmátrixot más néven több dimenziós mátrixnak is nevezzük. A mátrixokról már tanulhattunk órán is, tehát tudjuk, hogy egy alsó háromszögmátrixnál a főátlót kell figyelnünk, mert efölött csupa 0 számnak kell állnia. Ennek az alsó háromszögmátrix kiíratásának a folyamata: első sorban 1 elem, második sorban 2 elem, ..., és ötödik sorban már 5 elem van. Az elején kiírja a 3 memóriacímet is a program. A főbb elemek működési elvét kommentek formájában írtam bele a programba. 2 dolog maradt ki. A for ciklusok feladata az, hogy lépkedjenek a mátrix elemein soronként, illetve azok kiíratása. A program végén a free utasítás a malloc parancsot "teszi semmissé", tehát ez felszabadítja tm számára lefoglalt memóriaterületet. A kódba kommentek formájában hozzáfűztem a memóriafoglalás néhány részét, azt itt pluszban nem írnám le újra.
	</para>

    </section>        
    <section>
        <title>C EXOR titkosító</title>

	<para>Tutor (om volt): Ignéczi Tibor </para>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  progpater.blog.hu              
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para> 
        <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <unistd.h>
#include <string.h>

#define MAX_KULCS 100
#define BUFFER_MERET 256

int
main (int argc, char **argv)
{

  char kulcs[MAX_KULCS];
  char buffer[BUFFER_MERET];

  int kulcs_index = 0;
  int olvasott_bajtok = 0;

  int kulcs_meret = strlen (argv[1]);
  strncpy (kulcs, argv[1], MAX_KULCS);

  while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
    {

      for (int i = 0; i < olvasott_bajtok; ++i)
	{

	  buffer[i] = buffer[i] ^ kulcs[kulcs_index];
	  kulcs_index = (kulcs_index + 1) % kulcs_meret;

	}

      write (1, buffer, olvasott_bajtok);

    }
}
]]></programlisting>     
	<para>
Ez az exor program szövegek titkosítására szolgál. A titkosítást adatvédelem céljából szoktuk használni, hogy illetéktelen személy ne tudhassa meg, mit írtunk. A titkosításhoz egy 8 számjegyű kulcsot használunk jelen esetben. A definiálásnál a kulcsra pont emiatt van szükségünk, illetve definiálunk egy buffert is, amire a tárolás miatt van szükségünk. A fordításnál és futtatásnál ügyelnünk kell, ha nem vagyunk pontosak, nem fog működni. Ahhoz, hogy elkezdhessük, szükségünk van egy tiszta szövegre, vagyis az alapra, amit titkosítani akarunk. Én ezt tiszta.txt-nek neveztem el. A kódolás folyamata: gcc e.c -o e -std=c99. Az std=c99-re annyiból van szükség, hogy a c99-es szabvány szerint fordítsa le a programot. A szöveg titkosítása:         
<programlisting language="R"><![CDATA[
./e kercerece <tiszta.txt >titkos.szoveg
]]></programlisting>
Ha kíváncsiak vagyunk a titkosított szövegre, akkor ki kell adnunk a more titkos.szoveg parancsot, így megnézhetjük a terminálon. Mappából nem tudjuk megnyitni, ha nincs hozzá külön programunk. Majd a kódolt szöveget is vissza tudjuk bontani, és kiíratni terminálban: 
<programlisting language="R"><![CDATA[
./e kercerece <tiszta.txt
]]></programlisting>
	</para>      
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  BHAX csatorna és forrásai             
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>         
        <programlisting language="java"><![CDATA[
import java.io.InputStream;
import java.io.OutputStream;

public class Exor {
    
    public Exor(String kulcsSzöveg,
            java.io.InputStream bejövőCsatorna,
            java.io.OutputStream kimenőCsatorna)
            throws java.io.IOException {
        
        byte [] kulcs = kulcsSzöveg.getBytes();
        byte [] buffer = new byte[256];
        int kulcsIndex = 0;
        int olvasottBájtok = 0;

        while((olvasottBájtok = bejövőCsatorna.read(buffer)) != -1) {
            
            for(int i=0; i<olvasottBájtok; ++i) {
                
                buffer[i] = (byte)(buffer[i] ^ kulcs[kulcsIndex]);
                kulcsIndex = (kulcsIndex+1) % kulcs.length;
                
            }
            
            kimenőCsatorna.write(buffer, 0, olvasottBájtok);
            
        }
        
    }
    
    public static void main(String[] args) {
        
        try {
            
            new Exor(args[0], System.in, System.out);
            
        } catch(java.io.IOException e) {
            
            e.printStackTrace();
            
        }
        
    }
    
}
]]></programlisting> 
	<para>
Ugyan úgy működik futás közben, mint az exor titkosító C-ben, ami fentebb le van írva. A program osztállyal dolgozik. Megvizsgálja a bájtokat, majd elkezdi a titkosítást, ha minden stimmel. Adatvédelem szempontjából praktikus a program. A bejövő csatárnán történik az adatok beolvasása, és utána a bufferben ideiglenesen tárolódnak az adatok. A kulcsnak pedig a törésnél van nagyobb szerepe. Fordítása: javac Exor.java . A futtatása pedig: ./Exor szavak > titkos.txt
	</para>  
    </section>        
    <section>
        <title>C EXOR törő</title>

	<para>Tutor (om volt): Ignéczi Tibor </para>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: BHAX csatorna és forrásai               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para> 
        <programlisting language="c"><![CDATA[
#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 8
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>

double
atlagos_szohossz (const char *titkos, int titkos_meret)
{
    int sz = 0;
    for (int i = 0; i < titkos_meret; ++i)
        if (titkos[i] == ' ')
            ++sz;

    return (double) titkos_meret / sz;
}

int
tiszta_lehet (const char *titkos, int titkos_meret)
{
    // a tiszta szoveg valszeg tartalmazza a gyakori magyar szavakat
    // illetve az átlagos szóhossz vizsgálatával csökkentjük a
    // potenciális töréseket

    double szohossz = atlagos_szohossz (titkos, titkos_meret);

    return szohossz > 6.0 && szohossz < 9.0
           && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
           && strcasestr (titkos, "az") && strcasestr (titkos, "ha");

}

void
exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
{

    int kulcs_index = 0;

    for (int i = 0; i < titkos_meret; ++i)
    {

        titkos[i] = titkos[i] ^ kulcs[kulcs_index];
        kulcs_index = (kulcs_index + 1) % kulcs_meret;

    }

}

int
exor_tores (const char kulcs[], int kulcs_meret, char titkos[],
            int titkos_meret)
{

    exor (kulcs, kulcs_meret, titkos, titkos_meret);

    return tiszta_lehet (titkos, titkos_meret);

}

int
main (void)
{

    char kulcs[KULCS_MERET];
    char titkos[MAX_TITKOS];
    char *p = titkos;
    int olvasott_bajtok;

    // titkos fajl berantasa
    while ((olvasott_bajtok =
                read (0, (void *) p,
                      (p - titkos + OLVASAS_BUFFER <
                       MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
        p += olvasott_bajtok;

    // maradek hely nullazasa a titkos bufferben
    for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
        titkos[p - titkos + i] = '\0';

    // osszes kulcs eloallitasa
    for (int ii = '0'; ii <= '9'; ++ii)
        for (int ji = '0'; ji <= '9'; ++ji)
            for (int ki = '0'; ki <= '9'; ++ki)
                for (int li = '0'; li <= '9'; ++li)
                    for (int mi = '0'; mi <= '9'; ++mi)
                        for (int ni = '0'; ni <= '9'; ++ni)
                            for (int oi = '0'; oi <= '9'; ++oi)
                                for (int pi = '0'; pi <= '9'; ++pi)
                                {
                                    kulcs[0] = ii;
                                    kulcs[1] = ji;
                                    kulcs[2] = ki;
                                    kulcs[3] = li;
                                    kulcs[4] = mi;
                                    kulcs[5] = ni;
                                    kulcs[6] = oi;
                                    kulcs[7] = pi;

                                    if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
                                        printf
                                        ("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
                                         ii, ji, ki, li, mi, ni, oi, pi, titkos);

                                    // ujra EXOR-ozunk, igy nem kell egy masodik buffer
                                    exor (kulcs, KULCS_MERET, titkos, p - titkos);
                                }

    return 0;
}
	]]></programlisting> 
	<para>
A program működési elve szakaszosan bele van építve a programba kommentek formájában, illetve sok részében egyezik az exor titkosítóval, ezért nem írnám le itt is újra. A program a titkosított szövegek feltörésére szolgál, tehát visszaírja az eredeti formájába. Ha a titkosító e.c-t másképp futtatjuk le, és megadjuk neki a kulcsot, akkor lesz értelme ennek a programnak:
<programlisting language="R"><![CDATA[
./e kercerece <tiszta.txt >titkos.szoveg
]]></programlisting>
A more parancs itt is működik. A t.c program fordítása: gcc t.c -o t -std=c99 . Futtatása:
<programlisting language="R"><![CDATA[
time ./t <titkos.szoveg |grep 12345678
]]></programlisting>
Az std=c99-re amiatt van szükség, hogy c99 szabvány szerint forduljon a program, valamint a greppel megadjuk a 8 jegyű kulcsot. A futtatáskor kiírja a terminál, hogy mennyi időbe telt, még elvégezte a műveletet. Nem fut le azonnal, percekbe telik, de sokat csökkenthetünk a futási időn, ha másképp fordítunk, tehát így: gcc t.c -O3 -o t -std=c99 . A futtatás parancsa ugyan az, mint ahogyan a lassabnál írtam. 
	</para>             
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
	<para> Tutor (om volt): Duszka Ákos Attila, Takács Viktor </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para> 
	<para>
Ez a szimulációs program a neurális hálók segítségével dolgozik. A neurális hálók neuronokból állnak, amelyek agyi idegsejteknek felelnek meg, de programozásban is használják őket. Főleg a mesterséges intelligenciák létrehozásában van nagy szerepük. Ebben a szimulációban a neuronoknak megpróbálják megtanítani, hogy hogyan használjanak 3 logikai műveletet, az OR (megengedő vagy), AND (és) és EXOR(kizáró vagy). Az OR és AND műveletekkel nem kell sokat számolgatni, viszonylag gyorsan és pontos eredményt kaphatunk így. Rejtett rétegeket, azaz hiddeneket is használ a program. Az OR rétegben az a1 és a2-nak adunk értéket, és végrehajtunk rajtuk logikai vagy műveleteket, amivel parancsot tanulnak meg. Az AND már logikai műveletet is képes tanulni. Az EXORhoz már szükségünk van plusz rétegre. Ide kellenek a rejtett hálók, és a hidden értékek. A neuronok és neurális hálók eléréséhez telepíthetjük a neuralnet függvénycsomagot, pontosabban a neuralnetwork könyvtárra van szükségünk. Mivel mesterséges intelligencia az alapja, ezért ez a program is tanul. Ezt az első minta megadásával kezdhetjük meg. Súlyozást használ, de ezt jelenleg még nem nekünk kell megadnunk, hanem elvégzi magától a program. Amennyiben rejtett neuronokat használunk, manipulálhatjuk a programban a megoldásig vezető lépésszámot. Meg kell növelni ezeknek a mennyiségét, így kevesebb lépéssel is elvégezhető a feladat. A végén tudjuk ellenőrizni is, hogy mennyire sikerült megtanulnia a programnak az adott minta követését a számítások során.
	</para>
        <programlisting language="R"><![CDATA[   
#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# https://youtu.be/Koyw6IH5ScQ

library(neuralnet)

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)

or.data <- data.frame(a1, a2, OR)

nn.or <- neuralnet(OR~a1+a2, or.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.or)

compute(nn.or, or.data[,1:2])


a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
AND   <- c(0,0,0,1)

orand.data <- data.frame(a1, a2, OR, AND)

nn.orand <- neuralnet(OR+AND~a1+a2, orand.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.orand)

compute(nn.orand, orand.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=c(6, 4, 6), linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])
	]]></programlisting>        
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
	<para>Tutor (om volt): Duszka Ákos Attila </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása, szöveg:  <link xlink:href="http://mialmanach.mit.bme.hu/neuralis/ch04">http://mialmanach.mit.bme.hu/neuralis/ch04</link> 
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para> 
	<para> A main.cpp: </para>
        <programlisting language="c"><![CDATA[ 
#include <iostream>
#include "mlp.hpp"
#include "png++/png.hpp"

int main (int argc, char **argv)
{
    png::image <png::rgb_pixel> png_image (argv[1]);
    int size = png_image.get_width()*png_image.get_height();
    
    Perceptron* p = new Perceptron(3, size, 256, 1);

    double* image = new double[size];
    
    for(int i {0}; i<png_image.get_width(); ++i)
         for(int j {0}; j<png_image.get_height(); ++j)
            image[i*png_image.get_width()+j] = png_image[i][j].red;

    double value = (*p) (image);

    std::cout << value << std::endl;

    delete p;
    delete [] image;
}
]]></programlisting>      

	<para> Az mlp.hpp amely a perceptron osztályt tartalmazza: </para>
        <programlisting language="c"><![CDATA[     
#include <iostream>
#include <cstdarg>
#include <map>
#include <iterator>
#include <cmath>
#include <random>
#include <limits>
#include <fstream>


class Perceptron
{
public:
  Perceptron ( int nof, ... )
  {
    n_layers = nof;

    units = new double*[n_layers];
    n_units = new int[n_layers];

    va_list vap;

    va_start ( vap, nof );

    for ( int i {0}; i < n_layers; ++i )
      {
        n_units[i] = va_arg ( vap, int );

        if ( i )
          units[i] = new double [n_units[i]];
      }

    va_end ( vap );

    weights = new double**[n_layers-1];

#ifndef RND_DEBUG
    std::random_device init;
    std::default_random_engine gen {init() };
#else
    std::default_random_engine gen;
#endif

    std::uniform_real_distribution<double> dist ( -1.0, 1.0 );

    for ( int i {1}; i < n_layers; ++i )
      {
        weights[i-1] = new double *[n_units[i]];

        for ( int j {0}; j < n_units[i]; ++j )
          {
            weights[i-1][j] = new double [n_units[i-1]];

            for ( int k {0}; k < n_units[i-1]; ++k )
              {
                weights[i-1][j][k] = dist ( gen );
              }
          }
      }
  }

  Perceptron ( std::fstream & file )
  {
    file >> n_layers;

    units = new double*[n_layers];
    n_units = new int[n_layers];

    for ( int i {0}; i < n_layers; ++i )
      {
        file >> n_units[i];

        if ( i )
          units[i] = new double [n_units[i]];
      }

    weights = new double**[n_layers-1];

    for ( int i {1}; i < n_layers; ++i )
      {
        weights[i-1] = new double *[n_units[i]];

        for ( int j {0}; j < n_units[i]; ++j )
          {
            weights[i-1][j] = new double [n_units[i-1]];

            for ( int k {0}; k < n_units[i-1]; ++k )
              {
                file >> weights[i-1][j][k];
              }
          }
      }
  }


  double sigmoid ( double x )
  {
    return 1.0/ ( 1.0 + exp ( -x ) );
  }


  double operator() ( double image [] )
  {

    units[0] = image;

    for ( int i {1}; i < n_layers; ++i )
      {

#ifdef CUDA_PRCPS

        cuda_layer ( i, n_units, units, weights );

#else

        #pragma omp parallel for
        for ( int j = 0; j < n_units[i]; ++j )
          {
            units[i][j] = 0.0;

            for ( int k = 0; k < n_units[i-1]; ++k )
              {
                units[i][j] += weights[i-1][j][k] * units[i-1][k];
              }

            units[i][j] = sigmoid ( units[i][j] );

          }

#endif

      }

    return sigmoid ( units[n_layers - 1][0] );

  }

  void learning ( double image [], double q, double prev_q )
  {
    double y[1] {q};

    learning ( image, y );
  }

  void learning ( double image [], double y[] )
  {
    //( *this ) ( image );

    units[0] = image;

    double ** backs = new double*[n_layers-1];

    for ( int i {0}; i < n_layers-1; ++i )
      {
        backs[i] = new double [n_units[i+1]];
      }

    int i {n_layers-1};

    for ( int j {0}; j < n_units[i]; ++j )
      {
        backs[i-1][j] = sigmoid ( units[i][j] ) * ( 1.0-sigmoid ( units[i][j] ) ) * ( y[j] - units[i][j] );

        for ( int k {0}; k < n_units[i-1]; ++k )
          {
            weights[i-1][j][k] += ( 0.2* backs[i-1][j] *units[i-1][k] );
          }

      }

    for ( int i {n_layers-2}; i >0 ; --i )
      {

        #pragma omp parallel for
        for ( int j =0; j < n_units[i]; ++j )
          {

            double sum = 0.0;

            for ( int l = 0; l < n_units[i+1]; ++l )
              {
                sum += 0.19*weights[i][l][j]*backs[i][l];
              }

            backs[i-1][j] = sigmoid ( units[i][j] ) * ( 1.0-sigmoid ( units[i][j] ) ) * sum;

            for ( int k = 0; k < n_units[i-1]; ++k )
              {
                weights[i-1][j][k] += ( 0.19* backs[i-1][j] *units[i-1][k] );
              }
          }
      }

    for ( int i {0}; i < n_layers-1; ++i )
      {
        delete [] backs[i];
      }

    delete [] backs;

  }

  ~Perceptron()
  {
    for ( int i {1}; i < n_layers; ++i )
      {
        for ( int j {0}; j < n_units[i]; ++j )
          {
            delete [] weights[i-1][j];
          }

        delete [] weights[i-1];
      }

    delete [] weights;

    for ( int i {0}; i < n_layers; ++i )
      {
        if ( i )
          delete [] units[i];
      }

    delete [] units;
    delete [] n_units;

  }

  void save ( std::fstream & out )
  {
    out << " "
        << n_layers;

    for ( int i {0}; i < n_layers; ++i )
      out << " " << n_units[i];

    for ( int i {1}; i < n_layers; ++i )
      {
        for ( int j {0}; j < n_units[i]; ++j )
          {
            for ( int k {0}; k < n_units[i-1]; ++k )
              {
                out << " "
                    << weights[i-1][j][k];

              }
          }
      }

  }

private:
  Perceptron ( const Perceptron & );
  Perceptron & operator= ( const Perceptron & );

  int n_layers;
  int* n_units;
  double **units;
  double ***weights;

};
]]></programlisting>  
	<para>
Ez egy kódcsipet a nahshon programból származik, jelenleg nekünk csak a perceptron osztályra van szükségünk a téma szerint, nem az egész programra. A program a neurális hálóra épül, vagyis a neuronokra, az agysejtekre amiknek a feladata az elektromos impulzusok kezelése. A neurális háló elve nélkül nem létezne a mesterséges intelligencia sem, és ezért van szükségünk perceptronokra, hogy létrehozhassuk a mesterséges intelligenciát. A percepton feladata a tanulás, a függvény tanulás. A lineárisan elkülöníthető (vagyis szeparálható) függvényeket tanulja és használja könnyen. A perceptron lényegében egy hálózat, amit gyakorlati feladatok, problémák megoldására használnak. Ennek a hálónak a tanításakor alkalmazzák a hibavisszaterjesztéses (back-propagation) algoritmust legtöbbször. A perceptron osztály az általunk hozzáadott mandelbrot kép alapján dolgozik, a végén abból állít elő nekünk egy számot. A mandelbrot képünk rgb kódját adjuk át a neurális hálónak. Lényeges a rétegek száma. Fordítása: g++ mlp.hpp main.cpp -o perceptron -lpng -std=c++11 és a futtatása ./perceptron mandelbrot.png
	</para>
    </section>  
      
        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                
