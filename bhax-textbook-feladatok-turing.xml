<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
	    Végtelen ciklusok írására számtalan lehetőség van. Nagyon egyszerűen el lehet készíteni, egy alapelvet kell követni hozzá. While, illetve for ciklussal is előállítható, ezt kedv szerint dönti el a programozó. A lényeg, hogy olyan feltételt adjunk meg, ami mindig teljesül, így a futás sem fog megállni. Ahhoz, hogy 0%-ban használjuk egy végtelen ciklusban a processzormagokat, sleep függvényt, valamint a #pragma omp parallel párhuzamos programozási eszközt kell használnunk. Az előbbi a magot nem használja, megállítja a ciklust, míg az utóbbi a több magért felelős. Futtatáskor a jó parancshasználat lényeges, mind a 0%, mind a 100%-os használatnál, a -fopenmp kapcsolót kell beírnunk. A 100%-os maghasználatnál szintén a feltétel folyamatos teljesülése szükséges. Az összes maghasználathoz ugyan az a párhuzamos programozási eszköz szükséges, mint a 0%-osnál, és a futtatásához -fopenmp kapcsoló szükséges. Ahol csak 1 magos futás kell, ott a fordítás: gcc vegtelen.c -o vegtelen és a futtatás: ./vegtelen .Tehát a példák pici programokkal:
	</para>       
	<para>Végtelen ciklus 1 magon: </para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>

int main(){
while(1){}
return 0;
}
]]></programlisting>     
	<para>Végtelen ciklus minden magon: </para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>

int main(){
#pragma omp parallel
while(1){}
return 0;
}

//futtatas az osszes maghoz: gcc vegtelenmagok.c -o vegtelenmagok -fopenmp
]]></programlisting>   
	<para>Üres (0%) végtelen ciklus 1 magon: </para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <unistd.h>

int main(){
while(1){
	sleep(800);}
return 0;
}
]]></programlisting>   
	<para>Üres (0%) végtelen ciklus minden magon: </para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <unistd.h>

int main(){
#pragma omp parallel
while(1){
	sleep(800);};
return 0;
}

//futtatas az osszes maghoz: gcc vegtelenures.c -o vegtelenures -fopenmp
]]></programlisting>   
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
Ezen a programon már nem lehet túl sokat magyarázni, mert tanár úr részletesen leírta. A lényege az, hogy nem lehet ilyen programot írni, mert ez is lefagyna. Valamint ellentmondásba is ütközünk, tehát működésképtelen. A rekurzív hivatkozás miatt ha lefagy, akkor azt írja ki, hogy nem fagy, illetve ha nem fagy le a program, akkor pedig azt fogja kiírni, hogy lefagy. Szóval mindenképp rossz eredményt fogunk kapni, erre gondolok ellentmondás alatt.
	</para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
	    Több megoldási lehetőség van, lehetne például függvényt is használni, de a feladat ezt a lehetőségeket kizárja. Ezen kívül akár segédváltozó használatával teljesíthetjük a feladatot. Az eredetileg is deklarált 2 változónk mellé bevezetünk egy harmadik segédváltozót. A csere során ideiglenesen ebbe a segédbe töltjük be az egyik értéket, és 3 egyenlőséggel végrehajtjuk a cserét, majd kiíratjuk újra az értékeket. A fordításhoz és futtatáshoz nincs szükség semmi pluszra, normál módon gcc-vel mehet. Más megoldási lehetőségek például az összeadás, kivonás, szorzás, osztás művelet, ezeknek a segítségével is felcserélhetjük az értékeket, és így segédváltozóra sincs szükségünk. Fordítás: gcc valtozo.c -o valtozo és a futtatás: ./valtozo .Ezek ugyan úgy működnek, csak a műveleti jeleket kell felcserélnünk. 2 példára kódcsipet:
	</para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>

int main(){
    int valtozo_1 = 2,valtozo_2 = 4;
printf("valtozo_1=%d valtozo_2=%d\n",valtozo_1, valtozo_2);
    valtozo_1 = ( valtozo_1 - valtozo_2 );
    valtozo_2 = ( valtozo_1 + valtozo_2 );
    valtozo_1 = ( valtozo_2 - valtozo_1 );
printf("valtozo_1=%d valtozo_2=%d\n",valtozo_1, valtozo_2);
return 0;
}
]]></programlisting>
        <programlisting language="c"><![CDATA[
#include <stdio.h>

int main(){
    int valtozo_1 = 2,valtozo_2 = 4, c;
printf("Az eredeti valtozok: valtozo_1=%d valtozo_2=%d\n",valtozo_1, valtozo_2);
    c=valtozo_1;
    valtozo_1=valtozo_2;
    valtozo_2=c;
printf("Az eredmeny: valtozo_1=%d valtozo_2=%d\n",valtozo_1, valtozo_2);
return 0;
}
]]></programlisting>

    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
	<para> Tutor (om volt): Tóth Attila </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása (kód):  https://bhaxor.blog.hu/2018/08/28/labdapattogas
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
	    A labdapattogtatás során egy megadott karaktert, azaz a labdát mozgatjuk fokozatosan a pályályán. A léptetés egyszerűen működik, mindig növeljük 1-gyel, az x, illetve az y tengelyen történő mozgást is, így a labda átlósan fog mozogni, nem pedig függőlegesen vagy vízszintesen. Az if-es megoldásban 4 if segítségével megadhatjuk a labda "pattogását", azaz az irányváltásait. Azt vizsgálhatjuk meg velők, hogy elérte-e a labda a pálya valamelyik szélét, tehát a bal, jobb, alsó vagy felső szélét. Az initscr függvény gondoskodik arról, hogy futtatáskor a program egy új (terminál)ablakban nyíljon meg. A for(;;) egy végtelen ciklus, így a program egészen addig fog futni, amíg a felhasználó meg nem szakítja azt egy paranccsal. A usleep(nagy szám) függvény a késleltetésért felelős, így emberi szemmel is könnyen követhető. Nélküle a gépek gyors működése miatt szinte egybefolyna. If utasítások nélkül a konkrét pálya széleket is meg kell határozni, illetve egy-egy plusz deklarációt létrehozni, -1 értéket adva nekik. Ezekre akkor van szükségünk, amikor elérjük a pálya valamelyik szélét, és ha ezzel beszorzunk, akkor irányt vált a labda. Érdemes a labda kezdeti pozíciójának nem a 0;0 pontot megadni, mert így nem saroktól sarokig fog pattogni, ha jól határoztuk meg az értékeket. A usleep függvény itt is szükséges a lassításhoz, illetve használhatjuk még a system("clear") függvényt is, aminek a segítségével mindig csak a labda aktuális helyét fogjuk látni. Fordítás: gcc labda.c -o labda és a futtatás: ./labda
	</para>
	<para>Labdapattogás if-fel: </para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <curses.h>
#include <unistd.h>

int
main ( void )
{
    WINDOW *ablak;
    ablak = initscr ();

    int x = 0;
    int y = 0;

    int xnov = 1;
    int ynov = 1;

    int mx;
    int my;

    for ( ;; ) {

        getmaxyx ( ablak, my , mx );
        mvprintw ( y, x, "O" );

        refresh ();
        usleep ( 100000 );

        x = x + xnov;
        y = y + ynov;

        if ( x>=mx-1 ) { // elerte-e a jobb oldalt?
            xnov = xnov * -1;
        }
        if ( x<=0 ) { // elerte-e a bal oldalt?
            xnov = xnov * -1;
        }
        if ( y<=0 ) { // elerte-e a tetejet?
            ynov = ynov * -1;
        }
        if ( y>=my-1 ) { // elerte-e a aljat?
            ynov = ynov * -1;
        }

    }

    return 0;
}
]]></programlisting>  
	<mediaobject>
		<imageobject condition="print">
		 <imagedata fileref="Képek/labdaif.png" format="png"/>
		</imageobject>
	</mediaobject>
	<para>Labdapattogás if nélkül: </para>
        <programlisting language="c"><![CDATA[
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<unistd.h>


static void gotoxy(int x, int y) //kurzor pozicionálása
{
    int i;
    for(i=0; i<y; i++) printf("\n"); //lefelé tolás
    for(i=0; i<x; i++) printf(" "); //jobbra tolás
    printf("o\n"); //labda ikonja
}

int main(){
int egyx=1;
int egyy=-1;
int i;
int x=10; //a labda kezdeti pozíciója
int y=20;
int ty[23]; //magasság // a pálya mérete
int tx[80]; //szélesség

//pálya széleinek meghatározás

for(i=0; i<23; i++)
    ty[i]=1;

ty[1]=-1;
ty[22]=-1;
for(i=0; i<79; i++)
    tx[i]=1;

tx[1]=-1;
tx[79]=-1;

for(;;)
{
    //címsor és pozíció kijelzése
    printf("x=%2d", x);
    printf("y=%2d", y);


(void)gotoxy(x,y);
//printf("o\n"); Áthelyezve a gotoxy függvényve


x+=egyx;
y+=egyy;

egyx*=tx[x];
egyy*=ty[y];
usleep (200000);
system("clear");
}
}
]]></programlisting>   
	<mediaobject>
		<imageobject condition="print">
		 <imagedata fileref="Képek/labda1.png" format="png"/>
		</imageobject>
	</mediaobject> 
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: UDPROG csoport
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... 
        </para>
	<para>
	    A szóhossz vizsgálat bitenkénti léptetéssel történik, amennyit léptet, annyi lesz a szóhossz, az én esetemben ez 32 bit. A BogoMIPS hasonló működésielvvel rendelkezik, mint a szóhossz. Lényege, hogy a processzoridőt felhasználva hajtja végre a bitenkénti léptetéseket, azaz bizonyos időn belül hány műveletet képes elvégezni. Nem a normál óra szerint mér, hanem a saját processzoridejét használja, hiszen az időt is ez alapján állapítja meg. A bitenkénti léptetés során a műveletek száma hatványozódik, azaz x2, mindig 2 hatványa lesz az eredmény. Az órajel segítségével számol a BogoMips. A programon belül késleltetést is használ, de a fő funkciója az időmérés. A kommentek tartalmazzák a működés főbb lépéseinek leírását. Fordítás: gcc bogomips.c -o bogomips és a futtatás: ./bogomips
	</para>
	<para> A szóhossz a gépen: </para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>

int main(void){
int h = 0;
int n = 0x01; //8 biten tarol
do
++h;
while(n<<=1);
printf("A szohossz ezen a gepen: %d bites\n", h);
return 0;
}

//bitenkenti leptetes 0 es 1 kozott
]]></programlisting>
	<para> A BogoMips: </para>
        <programlisting language="c"><![CDATA[
#include <time.h>
#include <stdio.h>

void
delay (unsigned long long int loops) //kesleltetes, parametertol fugg
{
unsigned long long int i;
for (i = 0; i < loops; i++);
}

int
main (void)
{
unsigned long long int loops_per_sec = 1;
unsigned long long int ticks;

printf ("Calibrating delay loop..");
fflush (stdout); //kimenet kezelese

while ((loops_per_sec <<= 1)) //bitenkenti leptetes, leptetjuk a kesleltetest eggyel balra
{
ticks = clock (); //orajel kivetele, a clock a program inditasa ota eltelt processzoridovel ter vissza
delay (loops_per_sec);
ticks = clock () - ticks; //megegy orajel kivetel, ujra leolvassa az orajelet es kivonja belole a kezdetet

printf ("%llu %llu\n", ticks, loops_per_sec); //aktualis orajel, llu = unsigned long long int

if (ticks >= CLOCKS_PER_SEC) //ha a vegjel nagyobb mint egy mp //CLOCKS_PER_SEC =az egy mp alatti orajelek szamaval
{
loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC; //a kesleltetest mennyi ideig tartja fent

printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
(loops_per_sec / 5000) % 100);

return 0;
}
}

printf ("failed\n");
return -1;
}
]]></programlisting>

	<mediaobject>
		<imageobject condition="print">
		 <imagedata fileref="Képek/bogo.png" format="png"/>
		</imageobject>
	</mediaobject>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
	<para> Tutor (om volt): Tóth Attila </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: BHAX csatorna
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
	    A PageRankot eredetileg a Google találta ki, ez amit itt bemutat a kód, az egy egyszerűsített változat. A PageRank értékek célja az, hogy a különböző weboldalakat rangsorolja, egyfajta "fontossági" sorrend alapján. Minél több oldal mutat egy másik oldalra, annál fontosabb lesz az adott oldal. Az alapelve a vektorszorzás. Az adott 4x4-es mátrix a 4 megadott weboldalra utal. "Szavazatokat" osztanak egymás között ezek alapján kapják meg a rangjukat, tehát egy oldal hány másikra utal. Ehhez szükséges a vektorizálás, vagyis a mátrix, mert az határozza meg, hogy ki kire ad le szavazatot. A műveletek végrehajtásához egy végleges és egy ideiglenes tömböt használhatunk. Az if-ben a 0.00001 érték csillapításként működik. Elindul egy for(;;) végtelen ciklus, amit az if fog megtörni a break paranccsal, amint teljesül az if-ben leírt feltétel. A fordítás: gcc pagerank.c -o pagerank és a futtatás: ./ pagerank
	</para>
        <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <math.h>

void
kiir (double tomb[], int db)
{
int i;
for (i=0; i<db; i++)
printf("PageRank [%d]: %lf\n", i, tomb[i]);
}

double tavolsag(double pagerank[],double pagerank_temp[],int db)
{
double tav = 0.0;
int i;
for(i=0;i<db;i++)
tav +=fabs(pagerank[i] - pagerank_temp[i]);
return tav;
}

int main(void)
{
double L[4][4] = {
{0.0, 0.0, 1.0 / 3.0, 0.0},
{1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
{0.0, 1.0 / 2.0, 0.0, 0.0},
{0.0, 0.0, 1.0 / 3.0, 0.0}
};

double PR[4] = {0.0, 0.0, 0.0, 0.0}; //vegleges tomb
double PRv[4] = {1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0}; //ideiglenes tomb

long int i,j,h;
i=0; j=0; h=5;

for (;;)
{
for(i=0;i<4;i++)
PR[i] = PRv[i];
for (i=0;i<4;i++)
{
double temp=0;
for (j=0;j<4;j++)
temp+=L[i][j]*PR[j];
PRv[i]=temp;
}

if ( tavolsag(PR,PRv, 4) < 0.00001)
break;
}
kiir (PR,4);
return 0;

} 
]]></programlisting>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
	<para>
		Az R nyelv felépítése és szerkezete olyan mint a Matlabé, ez alapján megpróbálhatjuk bizonyítani a tételt, Brun tételét az ikerprímekről. Eszerint ha valamit felosztunk prím számú részekre, majd összeadjuk ezeket, akkor nem a végtelenségig fog nőni az érték, hanem a Brun által meghatározott konstanshoz tart. A Brun konstans a 2. A kérdés pedig amit a tétel szeretne megválaszolni az az, hogy az ikerprímszámok száma véges sok, vagy végtelen?
	</para>
        <programlisting language="R">
<![CDATA[
library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
]]>
        </programlisting>  
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <programlisting language="R">
<![CDATA[
kiserletek_szama=10000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }

    musorvezeto[i] = mibol[sample(1:length(mibol),1)]

}

nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}

valtoztatesnyer = which(kiserlet==valtoztat)


sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)

]]>
        </programlisting>  
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
		A Monty Hall probléma egy valószínűségszámítási tétel. Aki megnézi a 21 Las Vegas ostroma című filmet, megértheti a problémát, ugyanis a választási esélyeket firtatja a tétel, hogy mennyi valószínűséggel választunk jól, vagy rosszul. Az eredeti kérdés egy amerikai vetélkedő nyomán indult el. A józan észről szól. Ha nem gondolunk jobban utána, akkor úgy tűnik a legtöbb embernek, hogy nincs különbség aközött, hogy megváltoztatjuk e a döntésünket, vagy nem. Pedig valójában nagy különbség van, érdemes megváltoztatni a döntésünket a matematikai valószínűség szerint. Eredetileg minden választásnál 1/3-ad az esély, hogy azt választjuk, amelyikkel nyerünk. Viszont ha kiveszünk egyet a rosszakból, és előtte már választottunk, akkor a 3.-nak amelyet nem változtottunk és rossz, akkor a megmaradtnak 2/3-ad lesz az esélye, hogy jó, még az általunk választottnak továbbra is csak 1/3-ad.
	</para>

    </section>

</chapter>                
